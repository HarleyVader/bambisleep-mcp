.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Streaming Client</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
    }
    .video-container {
      max-width: 800px;
      margin: 20px auto;
    }
    video {
      width: 100%;
      border: 1px solid #ccc;
    }
    .control-panel {
      margin: 20px auto;
      max-width: 800px;
      padding: 15px;
      background: #f5f5f5;
      border-radius: 5px;
    }
    button {
      padding: 8px 16px;
      margin: 5px;
      cursor: pointer;
    }
    .status {
      padding: 10px;
      margin: 10px 0;
      background: #e6e6e6;
      border-radius: 3px;
    }
  </style>
</head>
<body>
  <h1>RTSP Stream Client</h1>
  
  <div class="video-container">
    <video id="videoElement" controls autoplay></video>
  </div>
  
  <div class="control-panel">
    <h3>Stream Control</h3>
    <div>
      <button id="connectBtn">Connect as Swap Node</button>
      <button id="requestStreamBtn" disabled>Request Stream</button>
      <button id="stopStreamBtn" disabled>Stop Stream</button>
    </div>
    <div class="status" id="statusPanel">Status: Not connected</div>
  </div>
  
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/client-node.js"></script>
  <script>
    // Stream client logic
    document.addEventListener('DOMContentLoaded', () => {
      const videoElement = document.getElementById('videoElement');
      const connectBtn = document.getElementById('connectBtn');
      const requestStreamBtn = document.getElementById('requestStreamBtn');
      const stopStreamBtn = document.getElementById('stopStreamBtn');
      const statusPanel = document.getElementById('statusPanel');
      
      let mediaSource = null;
      let sourceBuffer = null;
      let activeStreamId = null;
      
      // Initialize Media Source
      function initializeMediaSource() {
        mediaSource = new MediaSource();
        videoElement.src = URL.createObjectURL(mediaSource);
        
        mediaSource.addEventListener('sourceopen', () => {
          sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs="avc1.42E01E, mp4a.40.2"');
          console.log('MediaSource initialized');
        });
      }
      
      // Connect button handler
      connectBtn.addEventListener('click', () => {
        initializeMediaSource();
        
        // Initialize client node
        window.clientNode = new ClientNode({
          nodeType: 'swap'
        });
        
        // Listen for connection status changes
        const checkConnection = setInterval(() => {
          if (window.clientNode.connected) {
            connectBtn.disabled = true;
            requestStreamBtn.disabled = false;
            statusPanel.textContent = 'Status: Connected as Swap Node';
            clearInterval(checkConnection);
          }
        }, 500);
      });
      
      // Request stream button handler
      requestStreamBtn.addEventListener('click', () => {
        const streamId = prompt('Enter stream ID to request:', 'stream_1');
        if (!streamId) return;
        
        activeStreamId = streamId;
        statusPanel.textContent = `Status: Requesting stream ${streamId}...`;
        
        // Request the stream
        window.clientNode.requestStream(streamId, handleStreamData);
        stopStreamBtn.disabled = false;
        requestStreamBtn.disabled = true;
      });
      
      // Stop stream button handler
      stopStreamBtn.addEventListener('click', () => {
        if (activeStreamId) {
          window.clientNode.cancelStreamRequest(activeStreamId);
          activeStreamId = null;
          statusPanel.textContent = 'Status: Stream stopped';
          stopStreamBtn.disabled = true;
          requestStreamBtn.disabled = false;
        }
      });
      
      // Handle incoming stream data
      function handleStreamData(data) {
        statusPanel.textContent = `Status: Receiving stream ${data.streamId}`;
        
        try {
          // In a real implementation, we would process MP4 fragments
          // For demonstration, we'll assume data.chunks is a valid MP4 fragment
          if (sourceBuffer && !sourceBuffer.updating) {
            sourceBuffer.appendBuffer(new Uint8Array(data.chunks));
          }
        } catch (e) {
          console.error('Error appending video data:', e);
        }
      }
    });
  </script>
</body>
</html>